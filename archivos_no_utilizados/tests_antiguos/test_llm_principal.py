#!/usr/bin/env python3
"""
Test del sistema con LLM como principal
"""
import os
import sys
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from models import Cliente, ContextoConversacional
from agents.extractor import extraer_datos_cliente

def test_llm_principal():
    """Prueba el sistema con LLM como extractor principal"""
    
    print("üß† TEST: Sistema con LLM como extractor principal")
    print("=" * 60)
    
    # Cliente inicial vac√≠o
    cliente = Cliente(id_cliente="test_llm_001")
    contexto = ContextoConversacional()
    
    # Secuencia de mensajes de prueba
    mensajes = [
        "hola",
        "mi cliente quiere un seguro de vida",
        "se llama Juan Garc√≠a y tiene 45 a√±os",
        "tiene 2 hijos peque√±os",
        "trabaja como ingeniero en una empresa de tecnolog√≠a",
        "sus ingresos son de 3500 euros mensuales",
        "est√° casado y puede ahorrar 250 euros al mes",
        "no tiene seguro de vida pero cree que es importante"
    ]
    
    for i, mensaje in enumerate(mensajes, 1):
        print(f"\n{i}Ô∏è‚É£ Usuario: '{mensaje}'")
        
        # Usar extractor con LLM como principal
        cliente_anterior = Cliente(**cliente.model_dump())
        cliente, cambios = extraer_datos_cliente(cliente, mensaje, contexto)
        
        # Mostrar resultados
        if cambios:
            print(f"   ‚úÖ Cambios detectados:")
            if cliente.nombre != cliente_anterior.nombre:
                print(f"      üë§ Nombre: {cliente.nombre}")
            if cliente.edad != cliente_anterior.edad:
                print(f"      üéÇ Edad: {cliente.edad}")
            if cliente.num_dependientes != cliente_anterior.num_dependientes:
                print(f"      üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Dependientes: {cliente.num_dependientes}")
            if cliente.profesion != cliente_anterior.profesion:
                print(f"      üíº Profesi√≥n: {cliente.profesion}")
            if cliente.ingresos_mensuales != cliente_anterior.ingresos_mensuales:
                print(f"      üí∞ Ingresos: ‚Ç¨{cliente.ingresos_mensuales}")
            if cliente.estado_civil != cliente_anterior.estado_civil:
                print(f"      üíë Estado civil: {cliente.estado_civil}")
            if cliente.nivel_ahorro != cliente_anterior.nivel_ahorro:
                print(f"      üíµ Ahorro: ‚Ç¨{cliente.nivel_ahorro}")
            if cliente.tiene_seguro_vida != cliente_anterior.tiene_seguro_vida:
                print(f"      üõ°Ô∏è Tiene seguro: {cliente.tiene_seguro_vida}")
            if cliente.percepcion_seguro != cliente_anterior.percepcion_seguro:
                print(f"      ü§î Percepci√≥n: {cliente.percepcion_seguro}")
        else:
            print(f"   ‚ÑπÔ∏è No se detectaron cambios")
    
    # Resumen final
    print(f"\nüéâ PERFIL FINAL EXTRA√çDO POR LLM:")
    print("=" * 60)
    print(f"üë§ Nombre: {cliente.nombre}")
    print(f"üéÇ Edad: {cliente.edad}")
    print(f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Dependientes: {cliente.num_dependientes}")
    print(f"üíº Profesi√≥n: {cliente.profesion}")
    print(f"üí∞ Ingresos: ‚Ç¨{cliente.ingresos_mensuales}")
    print(f"üíë Estado civil: {cliente.estado_civil}")
    print(f"üíµ Ahorro: ‚Ç¨{cliente.nivel_ahorro}")
    print(f"üõ°Ô∏è Tiene seguro: {cliente.tiene_seguro_vida}")
    print(f"ü§î Percepci√≥n: {cliente.percepcion_seguro}")
    
    # Verificar completitud
    datos_completos = [
        cliente.nombre,
        cliente.edad,
        cliente.num_dependientes,
        cliente.profesion,
        cliente.ingresos_mensuales,
        cliente.estado_civil,
        cliente.nivel_ahorro,
        cliente.tiene_seguro_vida,
        cliente.percepcion_seguro
    ]
    
    completitud = sum(1 for dato in datos_completos if dato is not None)
    print(f"\nüìä Completitud: {completitud}/9 datos ({completitud/9*100:.1f}%)")
    
    # Evaluar √©xito
    success = completitud >= 6  # Al menos 6 campos extra√≠dos
    
    print(f"\n{'‚úÖ LLM FUNCIONA COMO EXTRACTOR PRINCIPAL' if success else '‚ùå LLM NO EXTRAE SUFICIENTES DATOS'}")
    
    if success:
        print("\nüöÄ VENTAJAS DEL LLM COMO PRINCIPAL:")
        print("   ‚úÖ Comprensi√≥n contextual superior")
        print("   ‚úÖ Manejo de lenguaje natural")
        print("   ‚úÖ Extracci√≥n de m√∫ltiples campos simult√°neamente")
        print("   ‚úÖ Interpretaci√≥n inteligente de frases complejas")
        print("   ‚úÖ Fallback a patrones si falla")
    
    return success

if __name__ == "__main__":
    test_llm_principal()